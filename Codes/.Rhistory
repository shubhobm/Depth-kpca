par(defaultPar)
defaultPar = par()
par(mfrow=c(3,2), mai=rep(0.1,4))
for(i in c(7,27,47)){
sm = matrix(img.mat0[i,], nrow=a, byrow=F)
plot(imagematrix(sm))
sm = matrix(img.mat[i,], nrow=a, byrow=F)
plot(imagematrix(sm))
}
par(defaultPar)
i = 27
defaultPar = par()
par(mfrow=c(5,3), mai=rep(0.1,4))
for(nf in 2*(1:5)){
s = reconKwok(mod.kpc[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcLoc[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcDep[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
}
par(defaultPar)
i = 7
defaultPar = par()
par(mfrow=c(5,3), mai=rep(0.1,4))
for(nf in 2*(1:5)){
s = reconKwok(mod.kpc[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcLoc[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcDep[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
}
par(defaultPar)
i = 47
defaultPar = par()
par(mfrow=c(5,3), mai=rep(0.1,4))
for(nf in 2*(1:5)){
s = reconKwok(mod.kpc[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcLoc[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcDep[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
}
par(defaultPar)
train <- read.csv("C:/Users/Subho/Downloads/train.csv")
View(train)
summary(train$label)
train1 = train[which(train$label<2),]
dim(train1)
max(train$pixel1)
max(train$pixel2)
View(train1)
max(train1)
train1[,-1] = train1[,-1]/255
plot(imagematrix(train1[1,]))
train1[1,]
plot(imagematrix(matrix(train1[1,], nrow=28, byrow=T)))
plot(imagematrix(matrix(train1[1,-1], nrow=28, byrow=T)))
z=matrix(train1[1,-1], nrow=28, byrow=T)
View(z)
plot(imagematrix(z))
library(kernlab)
library(pixmap)
library(ripa)
library(EBImage)
library(FNN)
source("misc_functions1.R")
plot(imagematrix(z))
sm = matrix(img.mat0[i,], nrow=a, byrow=F)
View(sm)
View(z)
class(z)
class(sm)
plot(imagematrix(sm))
plot(imagematrix(sm[1:28, 1:28]))
plot(imagematrix(z[1:28, 1:28]))
plot(z)
plot.imagematrix
imagematrix(z)
min(z)
summary(z)
z=matrix(as.numeric(train1[1,-1]), nrow=28, byrow=T)
imagematrix(z)
plot(imagematrix(z))
z=matrix(as.numeric(train1[2,-1]), nrow=28, byrow=T)
plot(imagematrix(z))
z=matrix(as.numeric(train1[3,-1]), nrow=28, byrow=T)
plot(imagematrix(z))
z=matrix(as.numeric(train1[31,-1]), nrow=28, byrow=T)
plot(imagematrix(z))
dim(train1)
img.mat=train1[1:100,]
(k = rbfdot(- 1/mean(log(kernelMatrix(rbfdot(.0005), img.mat))/.0005)))
dim(img.mat)
class(img.mat)
img.mat=as.matrix(train1[1:100,])
(k = rbfdot(- 1/mean(log(kernelMatrix(rbfdot(.0005), img.mat))/.0005)))
mod.kpc = list()
mod.kpcLoc = list()
mod.kpcDep = list()
for(nf in 1:10){
mod.kpc[[nf]] <- kpca(img.mat, features=nf, kernel=k)
mod.kpcLoc[[nf]] <- kpcaLocantore(img.mat, features=nf, kernel=k)
mod.kpcDep[[nf]] <- kpcaLocantore(img.mat, features=nf, is.depth=TRUE, kernel=k)
}
defaultPar = par()
par(mfrow=c(3,2), mai=rep(0.1,4))
for(i in c(7,27,47)){
sm = matrix(img.mat0[i,], nrow=a, byrow=F)
plot(imagematrix(sm))
sm = matrix(img.mat[i,], nrow=a, byrow=F)
plot(imagematrix(sm))
}
par(defaultPar)
i = 47
a=28
defaultPar = par()
par(mfrow=c(5,3), mai=rep(0.1,4))
for(nf in 2*(1:5)){
s = reconKwok(mod.kpc[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcLoc[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcDep[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
}
par(defaultPar)
img.mat[47,1]
i = 7
a=28
defaultPar = par()
par(mfrow=c(5,3), mai=rep(0.1,4))
for(nf in 2*(1:5)){
s = reconKwok(mod.kpc[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcLoc[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcDep[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
}
par(defaultPar)
i = 17
a=28
defaultPar = par()
par(mfrow=c(5,3), mai=rep(0.1,4))
for(nf in 2*(1:5)){
s = reconKwok(mod.kpc[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcLoc[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcDep[[nf]], img.mat[i:(i+1),], k=5)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
}
par(defaultPar)
img.mat[7,1]
img.mat[17,1]
i = 17
a=28
defaultPar = par()
par(mfrow=c(5,3), mai=rep(0.1,4))
for(nf in 2*(1:5)){
s = reconKwok(mod.kpc[[nf]], img.mat[i:(i+1),], k=20)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcLoc[[nf]], img.mat[i:(i+1),], k=20)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcDep[[nf]], img.mat[i:(i+1),], k=20)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
}
par(defaultPar)
train1 = train[which(train$label==3),]
img.mat=as.matrix(train1[1:100,])
i = 47 # change i to 7, 27 or 47 for 3 different persons
sm = matrix(img.mat[i,], nrow=28, byrow=F)
plot(imagematrix(sm))
i = 47 # change i to 7, 27 or 47 for 3 different persons
sm = matrix(img.mat[i,-1], nrow=28, byrow=F)
plot(imagematrix(sm))
(k = rbfdot(- 1/mean(log(kernelMatrix(rbfdot(.0005), img.mat))/.0005)))
i = 47 # change i to 7, 27 or 47 for 3 different persons
sm = matrix(img.mat[i,-1], nrow=28, byrow=T)
plot(imagematrix(sm))
mod.kpc = list()
mod.kpcLoc = list()
mod.kpcDep = list()
for(nf in 1:10){
mod.kpc[[nf]] <- kpca(img.mat, features=nf, kernel=k)
mod.kpcLoc[[nf]] <- kpcaLocantore(img.mat, features=nf, kernel=k)
mod.kpcDep[[nf]] <- kpcaLocantore(img.mat, features=nf, is.depth=TRUE, kernel=k)
}
dim(img.mat)
img.mat = img.mat[,-1]
mod.kpc = list()
mod.kpcLoc = list()
mod.kpcDep = list()
for(nf in 1:10){
mod.kpc[[nf]] <- kpca(img.mat, features=nf, kernel=k)
mod.kpcLoc[[nf]] <- kpcaLocantore(img.mat, features=nf, kernel=k)
mod.kpcDep[[nf]] <- kpcaLocantore(img.mat, features=nf, is.depth=TRUE, kernel=k)
}
dim(img.mat)
summary(img.mat)
img.mat = img.mat/155
img.mat = img.mat*155/255
mod.kpc = list()
mod.kpcLoc = list()
mod.kpcDep = list()
for(nf in 1:10){
mod.kpc[[nf]] <- kpca(img.mat, features=nf, kernel=k)
mod.kpcLoc[[nf]] <- kpcaLocantore(img.mat, features=nf, kernel=k)
mod.kpcDep[[nf]] <- kpcaLocantore(img.mat, features=nf, is.depth=TRUE, kernel=k)
}
sm = matrix(img.mat[i,], nrow=a, byrow=F)
plot(imagematrix(sm))
sm = matrix(img.mat[i,], nrow=a, byrow=T)
plot(imagematrix(sm))
digitdata = read.csv("C:/data/train_MNIST.csv")
dim(digitdata)
names(digitdata)
digitdata[,-1] = digitdata[,-1]/255
i = 31
sm = matrix(as.numeric(digitdata[i,01], nrow=28, byrow=T)
plot(imagematrix(sm))
sm = matrix(as.numeric(digitdata[i,01], nrow=28, byrow=T))
plot(imagematrix(sm))
sm = matrix(as.numeric(digitdata[i,-1], nrow=28, byrow=T))
plot(imagematrix(sm))
i = 31
sm = matrix(as.numeric(digitdata[i,-1], nrow=28, byrow=T))
plot(imagematrix(sm))
dev.off()
i = 31
sm = matrix(as.numeric(digitdata[i,-1], nrow=28, byrow=T))
plot(imagematrix(sm))
i = 1
sm = matrix(as.numeric(digitdata[i,-1], nrow=28, byrow=T))
plot(imagematrix(sm))
defaultPar = par()
par(mfcol=c(3,7), mai=rep(0,4))
for(nf in 2*(1:5)){
s = reconKwok(mod.kpc[[nf]], img.mat[i:(i+1),], k=2)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcLoc[[nf]], img.mat[i:(i+1),], k=2)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
s = reconKwok(mod.kpcDep[[nf]], img.mat[i:(i+1),], k=2)
sm = matrix(s[1,], nrow=a, byrow=F)
plot(imagematrix(sm))
}
#' Simulation Setup
#'@author Abhirup Mallik
# Simulation framework of Mika et al
ntrain <- 100
ntest <- 33
sigma <- 0.25
set.seed(12345)
#Error vectors
err_pc <- numeric(11)
err_kpc <- numeric(11)
err_kpcLoc <- numeric(11)
err_kpcDep <- numeric(11)
mu <- matrix(runif(11*10,min=-1,max=1),nrow=11,ncol=10)
for(i in 1:11){
x <- matrix(rnorm(10*(ntrain + ntest),mean=mu[i,],sd=sigma),ncol=10)
x.test <- x[-(1:100),]
x.train <- x[1:100,]
#PCA
res <- prcomp(x.train, center = TRUE, scale = FALSE)
test.res <- predict(res,x.test)
pcnum <- 2
res.trunc <- test.res[,1:pcnum] %*% t(res$rotation[,1:pcnum])
if(res$scale != FALSE){
res.trunc <- scale(res.trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
res.trunc <- scale(res.trunc, center = -1 * res$center, scale=FALSE)
}
#Kernel Choise
k = rbfdot(- 1/mean(log(kernelMatrix(rbfdot(.0005), x.train))/.0005))
#KPCA
mod.kpc <- kpca(x.train, features=pcnum, kernel=k)
mod.kpcLoc <- kpcaLocantore(x.train, features=pcnum, kernel=k)
mod.kpcDep <- kpcaLocantore(x.train, features=pcnum, is.depth=TRUE, kernel=k)
#Reconstruct
s_kpc.Kw = reconKwok(mod.kpc, x.test, k=5)
s_kpcLoc.Kw <- reconKwok(mod.kpcLoc, x.test, k=5)
s_kpcDep.Kw <- reconKwok(mod.kpcDep, x.test, k=5)
#Mean squared Dist
err_pc[i] <- norm(scale(res.trunc,center=mu[i,],scale = FALSE),type="F")
err_kpc[i] <- norm(scale(s_kpc.Kw,center=mu[i,],scale = FALSE),type="F")
err_kpcLoc[i] <- norm(scale(s_kpcLoc.Kw,center=mu[i,],scale = FALSE),type="F")
err_kpcDep[i] <- norm(scale(s_kpcDep.Kw,center=mu[i,],scale = FALSE),type="F")
}
err <- rbind(err_pc,err_kpc,err_kpcLoc,err_kpcDep)
apply(err,1,mean)
require(kernlab)
#' Simulation Setup
#'@author Abhirup Mallik
# Simulation framework of Mika et al
ntrain <- 100
ntest <- 33
sigma <- 0.25
set.seed(12345)
#Error vectors
err_pc <- numeric(11)
err_kpc <- numeric(11)
err_kpcLoc <- numeric(11)
err_kpcDep <- numeric(11)
mu <- matrix(runif(11*10,min=-1,max=1),nrow=11,ncol=10)
for(i in 1:11){
x <- matrix(rnorm(10*(ntrain + ntest),mean=mu[i,],sd=sigma),ncol=10)
x.test <- x[-(1:100),]
x.train <- x[1:100,]
#PCA
res <- prcomp(x.train, center = TRUE, scale = FALSE)
test.res <- predict(res,x.test)
pcnum <- 2
res.trunc <- test.res[,1:pcnum] %*% t(res$rotation[,1:pcnum])
if(res$scale != FALSE){
res.trunc <- scale(res.trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
res.trunc <- scale(res.trunc, center = -1 * res$center, scale=FALSE)
}
#Kernel Choise
k = rbfdot(- 1/mean(log(kernelMatrix(rbfdot(.0005), x.train))/.0005))
#KPCA
mod.kpc <- kpca(x.train, features=pcnum, kernel=k)
mod.kpcLoc <- kpcaLocantore(x.train, features=pcnum, kernel=k)
mod.kpcDep <- kpcaLocantore(x.train, features=pcnum, is.depth=TRUE, kernel=k)
#Reconstruct
s_kpc.Kw = reconKwok(mod.kpc, x.test, k=5)
s_kpcLoc.Kw <- reconKwok(mod.kpcLoc, x.test, k=5)
s_kpcDep.Kw <- reconKwok(mod.kpcDep, x.test, k=5)
#Mean squared Dist
err_pc[i] <- norm(scale(res.trunc,center=mu[i,],scale = FALSE),type="F")
err_kpc[i] <- norm(scale(s_kpc.Kw,center=mu[i,],scale = FALSE),type="F")
err_kpcLoc[i] <- norm(scale(s_kpcLoc.Kw,center=mu[i,],scale = FALSE),type="F")
err_kpcDep[i] <- norm(scale(s_kpcDep.Kw,center=mu[i,],scale = FALSE),type="F")
}
err <- rbind(err_pc,err_kpc,err_kpcLoc,err_kpcDep)
apply(err,1,mean)
source('misc_functions1.R')
#' Simulation Setup
#'@author Abhirup Mallik
# Simulation framework of Mika et al
ntrain <- 100
ntest <- 33
sigma <- 0.25
set.seed(12345)
#Error vectors
err_pc <- numeric(11)
err_kpc <- numeric(11)
err_kpcLoc <- numeric(11)
err_kpcDep <- numeric(11)
mu <- matrix(runif(11*10,min=-1,max=1),nrow=11,ncol=10)
for(i in 1:11){
x <- matrix(rnorm(10*(ntrain + ntest),mean=mu[i,],sd=sigma),ncol=10)
x.test <- x[-(1:100),]
x.train <- x[1:100,]
#PCA
res <- prcomp(x.train, center = TRUE, scale = FALSE)
test.res <- predict(res,x.test)
pcnum <- 2
res.trunc <- test.res[,1:pcnum] %*% t(res$rotation[,1:pcnum])
if(res$scale != FALSE){
res.trunc <- scale(res.trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
res.trunc <- scale(res.trunc, center = -1 * res$center, scale=FALSE)
}
#Kernel Choise
k = rbfdot(- 1/mean(log(kernelMatrix(rbfdot(.0005), x.train))/.0005))
#KPCA
mod.kpc <- kpca(x.train, features=pcnum, kernel=k)
mod.kpcLoc <- kpcaLocantore(x.train, features=pcnum, kernel=k)
mod.kpcDep <- kpcaLocantore(x.train, features=pcnum, is.depth=TRUE, kernel=k)
#Reconstruct
s_kpc.Kw = reconKwok(mod.kpc, x.test, k=5)
s_kpcLoc.Kw <- reconKwok(mod.kpcLoc, x.test, k=5)
s_kpcDep.Kw <- reconKwok(mod.kpcDep, x.test, k=5)
#Mean squared Dist
err_pc[i] <- norm(scale(res.trunc,center=mu[i,],scale = FALSE),type="F")
err_kpc[i] <- norm(scale(s_kpc.Kw,center=mu[i,],scale = FALSE),type="F")
err_kpcLoc[i] <- norm(scale(s_kpcLoc.Kw,center=mu[i,],scale = FALSE),type="F")
err_kpcDep[i] <- norm(scale(s_kpcDep.Kw,center=mu[i,],scale = FALSE),type="F")
}
err <- rbind(err_pc,err_kpc,err_kpcLoc,err_kpcDep)
apply(err,1,mean)
angdist <- function(x,y){
theta <- crossprod(x,y)/(sqrt(crossprod(x)*crossprod(y)))
acos(theta)
}
vecdist <- function(x,y){
sqrt(crossprod(x,y))
}
set.seed(12345)
n <- 101
x <- runif(n)
r <- rnorm(n)
y <- 2*sin(2*pi*x)+0.5+0.1*r
yout <- y
#number of outliers
numout <- 30
outliers <- rnorm(numout,mean = 5,sd=1)
#randomly replace points in x by outliers
indexout <- sample.int(n,size=numout)
yout[indexout] <- outliers
data <- cbind(x,yout)
#Distance between eigen vectors of KPCA and other PCA
#Cosine distance:
#Kernel Choise
k = rbfdot(- 1/mean(log(kernelMatrix(rbfdot(.0005), data))/.0005))
#KPCA
pcnum <- 1
mod.kpc <- kpca(data, features=pcnum, kernel=k)
mod.kpcLoc <- kpcaLocantore(data, features=pcnum, kernel=k)
mod.kpcDep <- kpcaLocantore(data, features=pcnum, is.depth=TRUE, kernel=k)
## Study for increasing number of outliers from 0 to 50
theta.Loc <- numeric(51)
theta.Dep <- numeric(51)
dist.Loc <- numeric(51)
dist.Dep <- numeric(51)
for(i in 1:51){
numout <- i -1
outliers <- rnorm(numout,mean = 5,sd=1)
#randomly replace points in x by outliers
indexout <- sample.int(n,size=numout)
yout[indexout] <- outliers
data <- cbind(x,yout)
#Distance between eigen vectors of KPCA and other PCA
#Cosine distance:
#Kernel Choise
k = rbfdot(- 1/mean(log(kernelMatrix(rbfdot(.0005), data))/.0005))
#KPCA
pcnum <- 1
mod.kpc <- kpca(data, features=pcnum, kernel=k)
mod.kpcLoc <- kpcaLocantore(data, features=pcnum, kernel=k)
mod.kpcDep <- kpcaLocantore(data, features=pcnum, is.depth=TRUE, kernel=k)
theta.Loc[i] <- angdist(pcv(mod.kpc),mod.kpcLoc$pcv)
theta.Dep[i] <- angdist(pcv(mod.kpc),mod.kpcDep$pcv)
dist.Loc[i] <- vecdist(pcv(mod.kpc),mod.kpcLoc$pcv)
dist.Dep[i] <- vecdist(pcv(mod.kpc),mod.kpcDep$pcv)
}
theta.Loc
theta.Dep
dist.Loc
dist.Dep
summary(theta.Loc)
summary(theta.Dep)
plot(density(theta.Dep))
lines(density(theta.Loc))
lines(density(dist.Loc))
lines(density(dist.Loc, na.rm=T))
lines(density(dist.Dep, na.rm=T))
library(kernlab)
source("misc_functions.R")
## function to get best gaussian kernel for data
tau = function(x){
n = nrow(x)
mat = matrix(0, n, n)
for(i in 1:n){
for(j in 1:i){
mat[i,j] = sum((x[i,] - x[j,])^2)
mat[j,i] = mat[i,j]
}
}
mean(mat)
}
## replicate the simulations of Huang et al, Neurocomputing 2011, 74:18, 3921-3930
## Paper name: An Iterative Algorithm for Robust Kernel Principal Component Analysis
# generate data
n = 150
set.seed(20150603)
x = seq(-1,1,length=n)
y = -.3*x^2 + .1*rnorm(n)
data = cbind(x,y)
# perform 3 types of PCA
k = polydot(2)
mod.kpc = kpca(data, features=1, kernel=k)
mod.kpcLoc = kpcaLocantore(data, features=1, kernel=k)
mod.kpcDep = kpcaLocantore(data, features=1, is.depth=TRUE, kernel=k)
# standardize PCs
pc.kpc = scale(pcv(mod.kpc))
pc.kpcLoc = scale(pcv(mod.kpcLoc))
pc.kpcDep = scale(pcv(mod.kpcDep))
# dot product: measure of similarity between two vectors... more is good
abs(mean(pc.kpc * pc.kpcLoc))
abs(mean(pc.kpc * pc.kpcDep))
